package bsbi;

import java.io.IOException;
import java.util.*;
import java.util.StringTokenizer;
import java.util.HashMap;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
//import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapreduce.Mapper.Context;
//import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.util.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;

public class BSBI {
    public static class TokenizerMapper extends Mapper<Object, Text, Text, Text>{

 //private final static IntWritable one = new IntWritable(1);
 private Text word = new Text();
 
 public void map(Object key, Text value, Context context) throws IOException, InterruptedException {

   // Split DocID and the actual text
  //   String DocId = value.toString().substring(0, value.toString().indexOf("\t"));
  //   String value_raw =  value.toString().substring(value.toString().indexOf("\t") + 1);

     // Reading input one line at a time and tokenizing by using space, "'", and "-" characters as tokenizers.
    StringTokenizer itr = new StringTokenizer(value.toString(), " '-");
    
    int docId = context.getTaskAttemptID().getTaskID().getId(); // Get the document ID from the task ID.
    
    // Iterating through all the words available in that line and forming the key/value pair.
    while (itr.hasMoreTokens()) {
      // Remove special characters
      word.set(itr.nextToken().replaceAll("[^a-zA-Z]", "").toLowerCase());
      if(word.toString() != "" && !word.toString().isEmpty()){
      /*
      Sending to output collector(Context) which in-turn passed the output to Reducer.
      The output is as follows:
        'word1' 5722018411
        'word1' 6722018415
        'word2' 6722018415
      */
        context.write(word, new Text(String.valueOf(docId)));
      }
    }
   }
  }

    public static class IntSumReducer extends Reducer<Text, Text, Text, Text> {
        private MultipleOutputs<Text, Text> multipleOutputs;
        private int postingListCounter;
        private int blockNumber;
        private HashMap<String, Integer> termToIdMap;
        private int currentTermId;

        @Override
        protected void setup(Context context) throws IOException, InterruptedException {
            multipleOutputs = new MultipleOutputs<>(context);
            postingListCounter = 0;
            blockNumber = 0;
            termToIdMap = new HashMap<>();
            currentTermId = 1; // Start term IDs from 1
        }

        /*
        Reduce method collects the output of the Mapper, calculates, and aggregates the word's count.
        */
        public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
            HashMap<String, Integer> map = new HashMap<String, Integer>();
            
            // Get the integer term ID for the word
            int termId = getTermId(key.toString());

            
            // Iterable through all the values available with a key [word] and add them together.
            for (Text val : values) {
                if (map.containsKey(val.toString())) {
                    map.put(val.toString(), map.get(val.toString()) + 1);
                } else {
                    map.put(val.toString(), 1);
                }
            }

            StringBuilder docValueList = new StringBuilder();
            for (String docID : map.keySet()) {
                docValueList.append(docID + ":" + map.get(docID) + " ");
            }

            // Write to the current output file
            
            multipleOutputs.write(String.valueOf(termId), key.toString(), "termId_word");

            multipleOutputs.write(new Text(String.valueOf(termId)), new Text(docValueList.toString()), String.valueOf(blockNumber));

            postingListCounter++;

            // Check if 500 posting lists have been processed, and if so, create a new output file
            if (postingListCounter >= 1) {
                multipleOutputs.close();
                postingListCounter = 0; // Reset the counter
                blockNumber ++;
            }
        }

        @Override
        protected void cleanup(Context context) throws IOException, InterruptedException {
            multipleOutputs.close();
        }
        
        private int getTermId(String word) {
            // If the word exists in the map, return its corresponding term ID
            if (termToIdMap.containsKey(word)) {
                return termToIdMap.get(word);
            }

            // Otherwise, assign a new term ID and add it to the map
            termToIdMap.put(word, currentTermId);
            currentTermId++;
            return currentTermId - 1;
        }
    }


  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "inverted index");
    job.setJarByClass(BSBI.class);
    job.setMapperClass(TokenizerMapper.class);
    // Commend out this part if you want to use combiner. Mapper and Reducer input and outputs type matching might be needed in this case. 
    //job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(Text.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
